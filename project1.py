{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project 1: Digit Classification with KNN and Naive Bayes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this project, you'll implement your own image recognition system for classifying digits. Read through the code and the instructions carefully and add your own code where indicated. Each problem can be addressed succinctly with the included packages -- please don't add any more. Grading will be based on writing clean, commented code, along with a few short answers.\n",
    "\n",
    "As always, you're welcome to work on the project in groups and discuss ideas on the course wall, but <b> please prepare your own write-up (with your own code). </b>\n",
    "\n",
    "If you're interested, check out these links related to digit recognition:\n",
    "\n",
    "Yann Lecun's MNIST benchmarks: http://yann.lecun.com/exdb/mnist/\n",
    "\n",
    "Stanford Streetview research and data: http://ufldl.stanford.edu/housenumbers/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/sklearn/cross_validation.py:41: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.\n",
      "  \"This module will be removed in 0.20.\", DeprecationWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/grid_search.py:42: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. This module will be removed in 0.20.\n",
      "  DeprecationWarning)\n"
     ]
    }
   ],
   "source": [
    "# This tells matplotlib not to try opening a new window for each plot.\n",
    "%matplotlib inline\n",
    "\n",
    "# Import a bunch of libraries.\n",
    "import time\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import MultipleLocator\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.datasets import fetch_mldata\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "# Set the randomizer seed so results are the same each time.\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the data. Notice that we are splitting the data into training, development, and test. We also have a small subset of the training data called mini_train_data and mini_train_labels that you should use in all the experiments below, unless otherwise noted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data shape:  (70000, 784)\n",
      "label shape: (70000,)\n"
     ]
    }
   ],
   "source": [
    "# Load the digit data either from mldata.org, or once downloaded to data_home, from disk. The data is about 53MB so this cell\n",
    "# should take a while the first time your run it.\n",
    "mnist = fetch_mldata('MNIST original', data_home='~/datasets/mnist')\n",
    "X, Y = mnist.data, mnist.target\n",
    "\n",
    "# Rescale grayscale values to [0,1].\n",
    "X = X / 255.0\n",
    "\n",
    "# Shuffle the input: create a random permutation of the integers between 0 and the number of data points and apply this\n",
    "# permutation to X and Y.\n",
    "# NOTE: Each time you run this cell, you'll re-shuffle the data, resulting in a different ordering.\n",
    "shuffle = np.random.permutation(np.arange(X.shape[0]))\n",
    "X, Y = X[shuffle], Y[shuffle]\n",
    "\n",
    "print ('data shape: ', X.shape)\n",
    "print ('label shape:', Y.shape)\n",
    "\n",
    "# Set some variables to hold test, dev, and training data.\n",
    "test_data, test_labels = X[61000:], Y[61000:]\n",
    "dev_data, dev_labels = X[60000:61000], Y[60000:61000]\n",
    "train_data, train_labels = X[:60000], Y[:60000]\n",
    "mini_train_data, mini_train_labels = X[:1000], Y[:1000]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(1) Create a 10x10 grid to visualize 10 examples of each digit. Python hints:\n",
    "\n",
    "- plt.rc() for setting the colormap, for example to black and white\n",
    "- plt.subplot() for creating subplots\n",
    "- plt.imshow() for rendering a matrix\n",
    "- np.array.reshape() for reshaping a 1D feature vector into a 2D matrix (for rendering)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1440 with 100 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def P1(num_examples=10):\n",
    "\n",
    "### STUDENT START ###\n",
    "    # Setup the plot matrix\n",
    "    plt.subplots(nrows=10, ncols=num_examples, figsize=(20,20))\n",
    "    plt.rc('image',cmap='Greys')   # Sets the colormap to grayscale\n",
    "        \n",
    "    for digit in range (0,10):\n",
    "        indices = np.where(Y==digit)\n",
    "        for digitloc in range(0,num_examples):\n",
    "            # Reshape each row to 28x28 matrix\n",
    "            X_digit = np.reshape(X[indices[0][digitloc]],(28,28))\n",
    "            plt.subplot(10,num_examples,digit*num_examples+digitloc +1)\n",
    "            # plot the image\n",
    "            plt.axis('off')\n",
    "            plt.imshow(X_digit)\n",
    "### STUDENT END ###\n",
    "\n",
    "P1(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(2) Evaluate a K-Nearest-Neighbors model with k = [1,3,5,7,9] using the mini training set. Report accuracy on the dev set. For k=1, show precision, recall, and F1 for each label. Which is the most difficult digit?\n",
    "\n",
    "- KNeighborsClassifier() for fitting and predicting\n",
    "- classification_report() for producing precision, recall, F1 results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification report for k = 1: \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "        0.0       0.91      0.98      0.94        99\n",
      "        1.0       0.89      1.00      0.94       105\n",
      "        2.0       0.99      0.79      0.88       102\n",
      "        3.0       0.77      0.87      0.82        86\n",
      "        4.0       0.89      0.82      0.85       104\n",
      "        5.0       0.93      0.84      0.88        91\n",
      "        6.0       0.94      0.96      0.95        98\n",
      "        7.0       0.89      0.92      0.90       113\n",
      "        8.0       0.94      0.88      0.91        96\n",
      "        9.0       0.78      0.82      0.80       106\n",
      "\n",
      "avg / total       0.89      0.89      0.89      1000\n",
      "\n",
      "Accuracy on the dev set for k = 1 is: 0.888\n",
      "Accuracy on the dev set for k = 3 is: 0.878\n",
      "Accuracy on the dev set for k = 5 is: 0.869\n",
      "Accuracy on the dev set for k = 7 is: 0.865\n",
      "Accuracy on the dev set for k = 9 is: 0.863\n"
     ]
    }
   ],
   "source": [
    "def P2(k_values):\n",
    "    \n",
    "\n",
    "### STUDENT START ###\n",
    "    for k in k_values:\n",
    "            \n",
    "        fit_model = KNeighborsClassifier(n_neighbors=k) \n",
    "        fit_model.fit(mini_train_data,mini_train_labels)  # fitting the model with the mini train data set\n",
    "        predict = fit_model.predict(dev_data) # Using devdata to evaluate the model\n",
    "        c = confusion_matrix(dev_labels, predict)\n",
    "        accuracy = fit_model.score(dev_data,dev_labels) # Calculating accuracy \n",
    "        if k==1: print(\"Classification report for k = 1: \\n \",classification_report(dev_labels, predict)) # Printing classification report\n",
    "        print(\"Accuracy on the dev set for k = \" + str(k) + \" is:\" , accuracy)\n",
    "    \n",
    "### STUDENT END ###\n",
    "\n",
    "k_values = [1, 3, 5, 7, 9]\n",
    "P2(k_values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ANSWER: The most difficult digit is : 9 , because of the lowest F1 score."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(3) Using k=1, report dev set accuracy for the training set sizes below. Also, measure the amount of time needed for prediction with each training size.\n",
    "\n",
    "- time.time() gives a wall clock value you can use for timing operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time to predict(training size 100): 0.11 sec. with the accuracy of 0.72.\n",
      "Time to predict(training size 200): 0.21 sec. with the accuracy of 0.786.\n",
      "Time to predict(training size 400): 0.42 sec. with the accuracy of 0.841.\n",
      "Time to predict(training size 800): 0.96 sec. with the accuracy of 0.884.\n",
      "Time to predict(training size 1600): 1.76 sec. with the accuracy of 0.902.\n",
      "Time to predict(training size 3200): 3.46 sec. with the accuracy of 0.926.\n",
      "Time to predict(training size 6400): 7.02 sec. with the accuracy of 0.937.\n",
      "Time to predict(training size 12800): 14.31 sec. with the accuracy of 0.959.\n",
      "Time to predict(training size 25000): 29.41 sec. with the accuracy of 0.97.\n",
      "Accuracies:  [0.72, 0.786, 0.841, 0.884, 0.902, 0.926, 0.937, 0.959, 0.97]\n"
     ]
    }
   ],
   "source": [
    "def P3(train_sizes, accuracies):\n",
    "\n",
    "### STUDENT START ###\n",
    "     \n",
    "     for train_size in train_sizes:\n",
    "        fit_model = KNeighborsClassifier(n_neighbors=1) # K = 1 neighbor\n",
    "        \n",
    "        time_begin = time.time()  # Timer Start\n",
    "        train_subset_data  = train_data[:train_size] # Training data subset\n",
    "        train_subset_labels = train_labels[:train_size] # Training labels subset\n",
    "        fit_model.fit(train_subset_data,train_subset_labels) # Fit the model with the subset of the data\n",
    "        predict = fit_model.predict(dev_data) # use the model to predict\n",
    "        time_total = time.time() - time_begin # Timer End\n",
    "        \n",
    "        c = confusion_matrix(dev_labels, predict)\n",
    "        accuracy = fit_model.score(dev_data,dev_labels)\n",
    "        accuracies.append(accuracy) # Creating the accuracy liat\n",
    "        print(\"Time to predict(training size {0}): {1:.2f} sec. with the accuracy of {2}.\".format(train_size,time_total,accuracy))\n",
    "\n",
    "        \n",
    "### STUDENT END ###\n",
    "\n",
    "train_sizes = [100, 200, 400, 800, 1600, 3200, 6400, 12800, 25000]\n",
    "accuracies = []\n",
    "P3(train_sizes, accuracies)\n",
    "print(\"Accuracies: \", accuracies)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(4) Fit a regression model that predicts accuracy from training size. What does it predict for n=60000? What's wrong with using regression here? Can you apply a transformation that makes the predictions more reasonable?\n",
    "\n",
    "- Remember that the sklearn fit() functions take an input matrix X and output vector Y. So each input example in X is a vector, even if it contains only a single value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted accuracy value for 60000 training size is :  [1.24307226]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def P4():\n",
    "\n",
    "### STUDENT START ###\n",
    "\n",
    "    fit_model = LinearRegression()\n",
    "    #Reshape the List to 9x1 vector for both train_size and the accuracies\n",
    "    fit_model.fit(np.array(train_sizes).reshape(9,1),np.array(accuracies).reshape(9,1))    \n",
    "    predict = fit_model.predict(60000)\n",
    "    print(\"Predicted accuracy value for 60000 training size is : \", predict[0])\n",
    "    \n",
    "    #Visual representation of the accuracy for different training sizes.\n",
    "    plt.xlabel (\"Training Size\")\n",
    "    plt.ylabel(\"Accuracy\")\n",
    "    plt.title(\"Accuracy Prediction based on Training Size\")\n",
    "    plt.scatter(train_sizes, accuracies,  color='black')\n",
    "    plt.plot(train_sizes, fit_model.predict(np.array(train_sizes).reshape(9,1)), color='blue', linewidth=3,label=\"Linear Mode Prediction\")\n",
    "    plt.legend(loc=\"best\")\n",
    "    \n",
    "### STUDENT END ###\n",
    "\n",
    "P4()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ANSWER: The relationship between Accuracy and the training size will not continue to grow in the linear fasion and the accuracy can never be more than 1. The abovev plot also confirms that accuracy never reaches 1. so linear regression is an example of wrong use here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fit a 1-NN and output a confusion matrix for the dev data. Use the confusion matrix to identify the most confused pair of digits, and display a few example mistakes.\n",
    "\n",
    "- confusion_matrix() produces a confusion matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix: \n",
      " [[ 97   0   0   0   0   0   2   0   0   0]\n",
      " [  0 105   0   0   0   0   0   0   0   0]\n",
      " [  4   4  81   4   0   0   0   4   3   2]\n",
      " [  1   0   0  75   0   3   0   3   1   3]\n",
      " [  0   2   0   0  85   0   3   0   0  14]\n",
      " [  2   0   0   9   0  76   0   1   1   2]\n",
      " [  1   1   1   0   1   0  94   0   0   0]\n",
      " [  1   4   0   1   1   0   0 104   0   2]\n",
      " [  0   2   0   5   0   2   1   0  84   2]\n",
      " [  1   0   0   3   9   1   0   5   0  87]]\n",
      "Few Samples: \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 16 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def P5():\n",
    "\n",
    "### STUDENT START ###\n",
    "    ax = plt.subplots(nrows=4,ncols=4,figsize=(10,10))\n",
    "    fit_model = KNeighborsClassifier(n_neighbors=1)\n",
    "    \n",
    "    # Fit the model using mini train data set\n",
    "    fit_model.fit(mini_train_data,mini_train_labels)\n",
    "    predict = fit_model.predict(dev_data)\n",
    "    \n",
    "    # Build the confusion matrix\n",
    "    c = confusion_matrix(dev_labels, predict)\n",
    "    print(\"Confusion Matrix: \\n\", c, end= '\\n')\n",
    "\n",
    "    # Find where the prediction goes wrong\n",
    "    dev_data_mismatch = np.where(predict !=dev_labels)\n",
    "    \n",
    "    print(\"Few Samples: \",end='\\n')\n",
    "    \n",
    "    # Plot few examples of incorrect classification\n",
    "    for i in range(0,16):\n",
    "        ax = plt.subplot(4,4,i+1)\n",
    "        ax.set_title(\"Predicted Label: {label}\".format(label=predict[dev_data_mismatch[0][i]]))\n",
    "        ax.axis('off')\n",
    "        ax.imshow(dev_data[dev_data_mismatch[0][i]].reshape(28,28))\n",
    "\n",
    "    \n",
    "### STUDENT END ###\n",
    "\n",
    "P5()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The most confused digits are [2 and 9]. They both have 20 incorrect classifications as seen in the confusion matrix above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(6) A common image processing technique is to smooth an image by blurring. The idea is that the value of a particular pixel is estimated as the weighted combination of the original value and the values around it. Typically, the blurring is Gaussian -- that is, the weight of a pixel's influence is determined by a Gaussian function over the distance to the relevant pixel.\n",
    "\n",
    "Implement a simplified Gaussian blur by just using the 8 neighboring pixels: the smoothed value of a pixel is a weighted combination of the original value and the 8 neighboring values. Try applying your blur filter in 3 ways:\n",
    "- preprocess the training data but not the dev data\n",
    "- preprocess the dev data but not the training data\n",
    "- preprocess both training and dev data\n",
    "\n",
    "Note that there are Guassian blur filters available, for example in scipy.ndimage.filters. You're welcome to experiment with those, but you are likely to get the best results with the simplified version I described above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gaussian_blur(arr):  # Method to introduce smoothness by blurring\n",
    "        \n",
    "    # Simple Blurring logic takes the 8 adjacent pixels values and averages out \n",
    "    digits = arr.shape[0]\n",
    "    new_digit = np.zeros((28, 28))\n",
    "    new_array = np.zeros(arr.shape)\n",
    "    for digit in range(digits):  # Take one row (digit at a time from the given array)\n",
    "        current_digit = arr[digit].reshape(28,28) # Conver that into 28x28 array so the calculation is easier\n",
    "        #print(\"processing:\" , digit)\n",
    "        for prow in range(28):\n",
    "            for pcol in range(28):\n",
    "                if pcol ==0 or prow ==0 or pcol == 27 or prow ==27:  # Leave out the corner cells and edge rows and columns\n",
    "                    new_digit[prow,pcol] = current_digit[prow,pcol]\n",
    "                    #print(pcol)\n",
    "                else:  \n",
    "                    # Use the simple logic of averaging the adjacent pixels\n",
    "                    new_value = (current_digit[prow,pcol] + \\\n",
    "                    current_digit[prow, pcol-1] + current_digit[prow-1,pcol-1] + \\\n",
    "                    current_digit[prow-1,pcol] + current_digit[prow-1,pcol+1] + \\\n",
    "                    current_digit[prow,pcol+1] + current_digit[prow+1,pcol+1] + current_digit[prow+1,pcol] + \\\n",
    "                    current_digit[prow+1,pcol-1])/9\n",
    "                    #print(current_digit[prow,pcol], new_value)\n",
    "                    \n",
    "                    new_digit[prow,pcol] = new_value\n",
    "                    \n",
    "                    # Reconstruct the vector array                \n",
    "        new_array[digit] = new_digit.reshape(1,784)\n",
    "    return new_array\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Preprocessing train_data........\n",
      "Preprocessing train_data complete.\n",
      "Preprocessing dev_data........\n",
      "Preprocessing dev_data complete.\n",
      "Accuracy of Blurred training data only: 0.982\n",
      "Accuracy of Blurred dev data only: 0.962\n",
      "Accuracy of Blurred both dev and training data: 0.979\n"
     ]
    }
   ],
   "source": [
    "# Current run time of this function is approximately 4 mins.\n",
    "\n",
    "def P6():\n",
    "\n",
    "    ### STUDENT START ###\n",
    "    # Using the Knn algorithm with k=1 \n",
    "    fit_model = KNeighborsClassifier(n_neighbors=1)\n",
    "\n",
    "    #preprocess the training data but not the dev data\n",
    "    print(\"Preprocessing train_data........\")\n",
    "    blur_train_data = gaussian_blur(train_data)\n",
    "    print(\"Preprocessing train_data complete.\")\n",
    "\n",
    "    #preprocess the dev data but not the training data\n",
    "    print(\"Preprocessing dev_data........\")\n",
    "    blur_dev_data = gaussian_blur(dev_data)\n",
    "    print(\"Preprocessing dev_data complete.\")\n",
    "\n",
    "\n",
    "    #Fit the model with the preprocessed training data\n",
    "\n",
    "    fit_model.fit(blur_train_data,train_labels)\n",
    "    #Evaluation of the model\n",
    "    print ('Accuracy of Blurred training data only:', fit_model.score(dev_data, dev_labels))\n",
    "\n",
    "\n",
    "    #Fit the model with the preprocessed dev data\n",
    "    fit_model.fit(train_data,train_labels)\n",
    "    #Evaluation of the model\n",
    "    print ('Accuracy of Blurred dev data only:', fit_model.score(blur_dev_data, dev_labels))\n",
    "\n",
    "\n",
    "    #preprocess both training and dev data\n",
    "    fit_model.fit(blur_train_data,train_labels)\n",
    "    #Evaluation of the model\n",
    "    print ('Accuracy of Blurred both dev and training data:', fit_model.score(blur_dev_data, dev_labels)) \n",
    "\n",
    "\n",
    "    ### STUDENT END ###\n",
    "\n",
    "\n",
    "P6()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(7) Fit a Naive Bayes classifier and report accuracy on the dev data. Remember that Naive Bayes estimates P(feature|label). While sklearn can handle real-valued features, let's start by mapping the pixel values to either 0 or 1. You can do this as a preprocessing step, or with the binarize argument. With binary-valued features, you can use BernoulliNB. Next try mapping the pixel values to 0, 1, or 2, representing white, grey, or black. This mapping requires MultinomialNB. Does the multi-class version improve the results? Why or why not?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Confusion Matrix(Bernoulli): \n",
      "\n",
      " [[ 96   0   0   1   0   0   2   0   0   0]\n",
      " [  0 101   0   0   0   1   1   0   2   0]\n",
      " [  4   1  80   6   0   0   2   3   6   0]\n",
      " [  0   2   5  64   0   3   2   1   7   2]\n",
      " [  0   0   1   0  81   0   3   2   6  11]\n",
      " [  3   2   0  19   4  57   3   0   0   3]\n",
      " [  3   3   2   0   2   1  87   0   0   0]\n",
      " [  1   5   1   1   2   2   0  86   1  14]\n",
      " [  0   4   1   8   0   4   0   0  74   5]\n",
      " [  2   0   2   3   2   2   0   2   4  89]]\n",
      "\n",
      "Accuracy (Bernoulli): \n",
      " 0.815\n",
      "\n",
      "Classification report (Bernoulli) : \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "        0.0       0.88      0.97      0.92        99\n",
      "        1.0       0.86      0.96      0.91       105\n",
      "        2.0       0.87      0.78      0.82       102\n",
      "        3.0       0.63      0.74      0.68        86\n",
      "        4.0       0.89      0.78      0.83       104\n",
      "        5.0       0.81      0.63      0.71        91\n",
      "        6.0       0.87      0.89      0.88        98\n",
      "        7.0       0.91      0.76      0.83       113\n",
      "        8.0       0.74      0.77      0.76        96\n",
      "        9.0       0.72      0.84      0.77       106\n",
      "\n",
      "avg / total       0.82      0.81      0.81      1000\n",
      "\n",
      "\n",
      "Confusion Matrix(Multinomial): \n",
      "\n",
      " [[ 95   0   1   0   0   1   2   0   0   0]\n",
      " [  0 100   0   1   0   1   2   0   1   0]\n",
      " [  4   2  79   6   0   0   2   2   7   0]\n",
      " [  0   2   7  63   0   1   1   0   5   7]\n",
      " [  0   0   0   0  71   0   5   0   8  20]\n",
      " [  2   0   0  21   1  51   2   1   7   6]\n",
      " [  2   3   2   0   2   2  87   0   0   0]\n",
      " [  1   3   2   1   2   0   0  87   2  15]\n",
      " [  0   5   2   8   0   4   0   0  72   5]\n",
      " [  2   2   1   2   2   0   0   1   4  92]]\n",
      "\n",
      "Accuracy (Multinomial): \n",
      " 0.797\n",
      "\n",
      "Classification report (Multinomial) : \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "        0.0       0.90      0.96      0.93        99\n",
      "        1.0       0.85      0.95      0.90       105\n",
      "        2.0       0.84      0.77      0.81       102\n",
      "        3.0       0.62      0.73      0.67        86\n",
      "        4.0       0.91      0.68      0.78       104\n",
      "        5.0       0.85      0.56      0.68        91\n",
      "        6.0       0.86      0.89      0.87        98\n",
      "        7.0       0.96      0.77      0.85       113\n",
      "        8.0       0.68      0.75      0.71        96\n",
      "        9.0       0.63      0.87      0.73       106\n",
      "\n",
      "avg / total       0.81      0.80      0.80      1000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "def P7():\n",
    "\n",
    "### STUDENT START ###\n",
    "\n",
    "    #Bernoulli Model\n",
    "    \n",
    "    fit_model = BernoulliNB( binarize=0.0) # using binarize argument to classifying into binary values\n",
    "    fit_model.fit(mini_train_data, mini_train_labels)\n",
    "    predict = fit_model.predict(dev_data)\n",
    "    c = confusion_matrix(dev_labels, predict)\n",
    "    accuracy = fit_model.score(dev_data, dev_labels)\n",
    "    print(\"\\nConfusion Matrix(Bernoulli): \\n\\n\", c)\n",
    "    print(\"\\nAccuracy (Bernoulli): \\n\", accuracy)\n",
    "    print(\"\\nClassification report (Bernoulli) : \\n \",classification_report(dev_labels, predict))\n",
    "    \n",
    "    #Multinomial Model\n",
    "    \n",
    "    def preprocess(arr):  # Function to mapping the pixel values to 0 , 1 or 2\n",
    "        new_arr = np.zeros(arr.shape)\n",
    "        for row in range(arr.shape[0]):\n",
    "            for col in range(arr.shape[1]):\n",
    "                cell_value = arr[row,col]\n",
    "                if cell_value > 0 and cell_value <= 0.9:   # Assumption (Logic): \n",
    "                    new_arr[row,col]=1.0                       # if original value = 0 then 0 , original value < 0.9 then 1\n",
    "                elif cell_value > 0.9:                     # orignial value >= 0.9 then 2\n",
    "                        new_arr[row,col]=2.0\n",
    "        return new_arr\n",
    "\n",
    "    new_train_data = preprocess(mini_train_data)  #Preprocess the training data\n",
    "    fit_model = MultinomialNB(alpha=1.0) # Using Multinomial \n",
    "    fit_model.fit(new_train_data, mini_train_labels)\n",
    "    predict = fit_model.predict(dev_data)\n",
    "    c = confusion_matrix(dev_labels, predict)\n",
    "    accuracy = fit_model.score(dev_data, dev_labels)\n",
    "    print(\"\\nConfusion Matrix(Multinomial): \\n\\n\", c)\n",
    "    print(\"\\nAccuracy (Multinomial): \\n\", accuracy)\n",
    "    print(\"\\nClassification report (Multinomial) : \\n \",classification_report(dev_labels, predict))\n",
    "        \n",
    "### STUDENT END ###\n",
    "\n",
    "P7()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ANSWER: Further classifying the training data into three categories doesn't seem to improve the overall performance of the model over binomial NB model. The accuracy and the F1 score tend to be little lower than the binomial model. The additional classification of the features doesnt add any additional information to the model.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(8) Use GridSearchCV to perform a search over values of alpha (the Laplace smoothing parameter) in a Bernoulli NB model. What is the best value for alpha? What is the accuracy when alpha=0? Is this what you'd expect?\n",
    "\n",
    "- Note that GridSearchCV partitions the training data so the results will be a bit different than if you used the dev data for evaluation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/sklearn/naive_bayes.py:472: UserWarning: alpha too small will result in numeric errors, setting alpha = 1.0e-10\n",
      "  'setting alpha = %.1e' % _ALPHA_MIN)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/naive_bayes.py:472: UserWarning: alpha too small will result in numeric errors, setting alpha = 1.0e-10\n",
      "  'setting alpha = %.1e' % _ALPHA_MIN)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/naive_bayes.py:472: UserWarning: alpha too small will result in numeric errors, setting alpha = 1.0e-10\n",
      "  'setting alpha = %.1e' % _ALPHA_MIN)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean: 0.80300, std: 0.01644, params: {'alpha': 0.0}\n",
      "mean: 0.81800, std: 0.02216, params: {'alpha': 0.0001}\n",
      "mean: 0.82000, std: 0.02073, params: {'alpha': 0.001}\n",
      "mean: 0.82100, std: 0.01811, params: {'alpha': 0.01}\n",
      "mean: 0.81500, std: 0.02013, params: {'alpha': 0.1}\n",
      "mean: 0.80000, std: 0.01188, params: {'alpha': 0.5}\n",
      "mean: 0.79500, std: 0.01145, params: {'alpha': 1.0}\n",
      "mean: 0.78400, std: 0.01934, params: {'alpha': 2.0}\n",
      "mean: 0.72000, std: 0.02495, params: {'alpha': 10.0}\n"
     ]
    }
   ],
   "source": [
    "def P8(alphas):\n",
    "\n",
    "### STUDENT START ###\n",
    "    \n",
    "    fit_model = BernoulliNB(binarize=0.5)\n",
    "    # Use the Grid Search for parameter tuning\n",
    "    grid = GridSearchCV(estimator=fit_model, param_grid=alphas)\n",
    "    \n",
    "    # Evaluating using Dev Data set\n",
    "    grid.fit(mini_train_data,mini_train_labels)  \n",
    "    return grid\n",
    "### STUDENT END ###\n",
    "\n",
    "alphas = {'alpha': [0.0, 0.0001, 0.001, 0.01, 0.1, 0.5, 1.0, 2.0, 10.0]}\n",
    "nb = P8(alphas)\n",
    "\n",
    "# Print the values of the grid score for each parameter.\n",
    "for values in nb.grid_scores_:\n",
    "    print(values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ANSWER: The accuracy when alpha = 0.01 is highest among the other values of the parameter [Using mini_train data for the evaluation]. The accuracy when alpha = 0 is 0.827, it is expected be lower when there is no smoothing."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(9) Try training a model using GuassianNB, which is intended for real-valued features, and evaluate on the dev data. You'll notice that it doesn't work so well. Try to diagnose the problem. You should be able to find a simple fix that returns the accuracy to around the same rate as BernoulliNB. Explain your solution.\n",
    "\n",
    "Hint: examine the parameters estimated by the fit() method, theta\\_ and sigma\\_."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using GaussianNB :  0.571\n",
      "Accuracy using BernoulliNB :  0.826\n",
      "Accuracy using GaussianNB after adding noise:  0.817\n"
     ]
    }
   ],
   "source": [
    "def P9():\n",
    "\n",
    "### STUDENT END ###\n",
    "    \n",
    "    #GaussianNB model\n",
    "    fit_model_G = GaussianNB()\n",
    "    fit_model_G.fit(train_data, train_labels)\n",
    "    predict = fit_model_G.predict(dev_data)\n",
    "    print (\"Accuracy using GaussianNB : \", fit_model_G.score(dev_data,dev_labels))\n",
    "    \n",
    "    #BernoulliNB Model\n",
    "    fit_model_B = BernoulliNB()\n",
    "    fit_model_B.fit(train_data, train_labels)\n",
    "    predict = fit_model_B.predict(dev_data)\n",
    "    print (\"Accuracy using BernoulliNB : \", fit_model_B.score(dev_data,dev_labels))\n",
    "    \n",
    "    #GaussianNB model with noise added\n",
    "    mean = train_data.mean()\n",
    "    sigma = np.std(train_data)\n",
    "    noise = np.random.normal(mean, sigma, train_data.shape)\n",
    "    noise_train_data = np.array(train_data + noise)\n",
    "    \n",
    "    fit_model_G.fit(noise_train_data, train_labels)\n",
    "    noise = np.random.normal(mean, sigma, dev_data.shape)\n",
    "    noise_dev_data = np.array(dev_data + noise)\n",
    "    print (\"Accuracy using GaussianNB after adding noise: \", fit_model_G.score(noise_dev_data,dev_labels))\n",
    "    \n",
    "\n",
    "### STUDENT END ###\n",
    "\n",
    "gnb = P9()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ANSWER: The accuracy of the GuassianNB improved from 0.563 to 0,818 after adding noise around the mean. Gaussian expect the sample distribution to be normatl and that is not the case with the data. So adding noise around the mean makes it more normal and hence improves the accuracy which is closer to BernoulliNB.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(10) Because Naive Bayes is a generative model, we can use the trained model to generate digits. Train a BernoulliNB model and then generate a 10x20 grid with 20 examples of each digit. Because you're using a Bernoulli model, each pixel output will be either 0 or 1. How do the generated digits compare to the training digits?\n",
    "\n",
    "- You can use np.random.rand() to generate random numbers from a uniform distribution\n",
    "- The estimated probability of each pixel is stored in feature\\_log\\_prob\\_. You'll need to use np.exp() to convert a log probability back to a probability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x1800 with 200 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def P10(num_examples):\n",
    "\n",
    "### STUDENT START ###\n",
    "\n",
    "    fit_model = BernoulliNB(binarize=0.0) # Use the Bernoulli Classifier\n",
    "    fit_model.fit(train_data, train_labels)\n",
    "    plt.subplots(nrows=20, ncols=10, figsize=(25,25))\n",
    "    plt.rc('image',cmap='Greys') \n",
    "\n",
    "    for digit in range(0,10):\n",
    "        #using the _log_prob_, find the actual probability for each digit\n",
    "        digit_prob = np.exp(fit_model.feature_log_prob_)[digit]\n",
    "        for count in range(0,num_examples):\n",
    "            # Re-generate the feature vectors by using the probability of the fitted model \n",
    "            feature = [np.random.choice([1,0],  p=[digit_prob[pixel],1-digit_prob[pixel]]) for pixel in range(0,784)]\n",
    "            feature = np.reshape(feature,(28,28))\n",
    "            \n",
    "            #Plot the reconstructed digit\n",
    "            plt.subplot(20,10,(count*10) + digit + 1)\n",
    "            plt.axis('off')\n",
    "            plt.imshow(feature)\n",
    "\n",
    "\n",
    "### STUDENT END ###\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "P10(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ANSWER:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(11) Remember that a strongly calibrated classifier is rougly 90% accurate when the posterior probability of the predicted class is 0.9. A weakly calibrated classifier is more accurate when the posterior is 90% than when it is 80%. A poorly calibrated classifier has no positive correlation between posterior and accuracy.\n",
    "\n",
    "Train a BernoulliNB model with a reasonable alpha value. For each posterior bucket (think of a bin in a histogram), you want to estimate the classifier's accuracy. So for each prediction, find the bucket the maximum posterior belongs to and update the \"correct\" and \"total\" counters.\n",
    "\n",
    "How would you characterize the calibration for the Naive Bayes model?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p(pred) <= 0.5000000000000    total =   3    accuracy = 0.333\n",
      "p(pred) <= 0.9000000000000    total =  42    accuracy = 0.571\n",
      "p(pred) <= 0.9990000000000    total =  95    accuracy = 0.495\n",
      "p(pred) <= 0.9999900000000    total =  76    accuracy = 0.645\n",
      "p(pred) <= 0.9999999000000    total =  62    accuracy = 0.710\n",
      "p(pred) <= 0.9999999990000    total =  71    accuracy = 0.873\n",
      "p(pred) <= 0.9999999999900    total =  75    accuracy = 0.893\n",
      "p(pred) <= 0.9999999999999    total =  81    accuracy = 0.926\n",
      "p(pred) <= 1.0000000000000    total = 495    accuracy = 0.972\n"
     ]
    }
   ],
   "source": [
    "def P11(buckets, correct, total):\n",
    "    \n",
    "### STUDENT START ###\n",
    "    \n",
    "    fit_model = BernoulliNB(alpha=0.001, binarize=0.5)\n",
    "    fit_model.fit(train_data, train_labels)\n",
    "    predict = fit_model.predict(dev_data)\n",
    "    \n",
    "    pbucket=0\n",
    "    for bindex, bvalue in enumerate(buckets):\n",
    "        for pindex,pvalue in enumerate(fit_model.predict_proba(dev_data)):\n",
    "            if pvalue.max() <= buckets[bindex] and pvalue.max() > pbucket:\n",
    "                total[bindex] +=1\n",
    "                if predict[pindex] == dev_labels[pindex]:\n",
    "                    correct[bindex] +=1\n",
    "        pbucket= buckets[bindex]\n",
    "\n",
    "                \n",
    "### STUDENT END ###\n",
    "\n",
    "buckets = [0.5, 0.9, 0.999, 0.99999, 0.9999999, 0.999999999, 0.99999999999, 0.9999999999999, 1.0]\n",
    "correct = [0 for i in buckets]\n",
    "total = [0 for i in buckets]\n",
    "\n",
    "P11(buckets, correct, total)\n",
    "\n",
    "for i in range(len(buckets)):\n",
    "    accuracy = 0.0\n",
    "    if (total[i] > 0): accuracy = correct[i] / total[i]\n",
    "    print ('p(pred) <= %.13f    total = %3d    accuracy = %.3f' %(buckets[i], total[i], accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ANSWER: The accuracy increases as the predicted probability increases. It is a weak calssifier as the accuracy still around 0.55 even when the probability is 0.999."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(12) EXTRA CREDIT\n",
    "\n",
    "Try designing extra features to see if you can improve the performance of Naive Bayes on the dev set. Here are a few ideas to get you started:\n",
    "- Try summing the pixel values in each row and each column.\n",
    "- Try counting the number of enclosed regions; 8 usually has 2 enclosed regions, 9 usually has 1, and 7 usually has 0.\n",
    "\n",
    "Make sure you comment your code well!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.819\n",
      "0.819\n"
     ]
    }
   ],
   "source": [
    "#def P12():\n",
    "    \n",
    "\n",
    "### STUDENT START ###\n",
    "mini_train_data_v2 = np.copy(mini_train_data)\n",
    "\n",
    "#Add all the features and create a new feature \"Total\"\n",
    "total = np.sum(mini_train_data_v2,axis=1)\n",
    "mini_train_data_v2 = np.append(mini_train_data_v2,np.array(total).reshape(mini_train_data_v2.shape[0],1),axis=1)\n",
    "\n",
    "dev_data_v2 = np.copy(dev_data)\n",
    "total = np.sum(dev_data_v2,axis=1)\n",
    "dev_data_v2 = np.append(dev_data_v2,np.array(total).reshape(dev_data_v2.shape[0],1),axis=1)\n",
    "\n",
    "fit_model = BernoulliNB(alpha=0.001, binarize=0.5)\n",
    "\n",
    "#Evaluate the model with mini_train_data\n",
    "fit_model.fit(mini_train_data, mini_train_labels)\n",
    "print(fit_model.score(dev_data,dev_labels))\n",
    "\n",
    "#Evaluate the model with mini_train_data (with appended column for the sum)\n",
    "fit_model.fit(mini_train_data_v2, mini_train_labels)\n",
    "print(fit_model.score(dev_data_v2,dev_labels))\n",
    "\n",
    "### STUDENT END ###\n",
    "\n",
    "#P12()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ANSWER: Adding all the features didn't really change the accuracy in this case."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
